I need help fixing the testimonials carousel in `test.html` for my Tetralto Roofing website to display customer testimonials, optimized for SEO and accessibility. The testimonials are stored in a Django model called `Testimonial` (with fields like `id`, `text`, `author`, `rating`, `date`, `is_featured` (boolean), `location`, `service`, `review_url` (e.g., Google Maps URL)). Only testimonials where `is_featured=True` should be included when `is_featured=True` is passed, but the code should support fetching all testimonials if `is_featured` is not specified (for future flexibility with other flags). Check the current implementation in my Django project for exact model and field names if they differ (e.g., `Review` instead of `Testimonial`, `content` instead of `text`). The existing carousel in `home.html` should remain untouched.

The current `test.html` has three carousels (`full-width-carousel`, `medium-width-carousel`, `small-width-carousel`) for responsive width tests (1400px, 768px, 375px), but lacks a hidden SEO data block, Schema.org markup, accessibility attributes, proper rating display, and the correct inclusion tag. Fix these issues:

1. **Missing SEO Data Block**: Add a single `<div class="reviews-data" hidden>` at the start of `test.html` containing all testimonials (filtered by `is_featured=True` if passed) for crawlers to index, with `<article class="review" data-review-id="ID">` per testimonial.
2. **No Schema.org Markup**: Include Schema.org markup (JSON-LD) for each review in the `reviews-data` block, with `rating` (handle any database value, currently 5), `author`, `reviewBody`, `itemReviewed` (for `service`), and `url` (for `review_url`).
3. **Accessibility Issues**: Add ARIA attributes: `role="region" aria-label="Customer testimonials"` on each carousel, and `aria-hidden="true/false"` on each slide based on visibility.
7. **Rating Display**: Include the raw `rating` value (e.g., `<span>{{ testimonial.rating }}</span>`) in both the SEO data and carousel slides, styled as stars (e.g., 5 `⭐` for rating=5) using CSS/JavaScript.
8. **Modularity and Inclusion Tag**: Implement as a custom Django inclusion tag named `import_testimonials` in `app/templatetags/testimonial_tags.py`, callable with `{% load testimonial_tags %} {% import_testimonials carousel_id="test-carousel" is_featured=True %}`.

Key requirements:
1. **Modular Code**: Create the inclusion tag in `app/templatetags/testimonial_tags.py`, registered with `@register.inclusion_tag('testimonials/carousel.html')`, where `carousel.html` is a partial template in `app/templates/testimonials/`. The tag accepts `carousel_id` (e.g., "full-width-carousel") and `is_featured` (boolean, default None).
2. **SEO Optimization**: Output the SEO data (`<div class="reviews-data" hidden>`) once at the start of `test.html`, before the carousels, with Schema.org JSON-LD for each testimonial (fields: `text`, `author`, `rating`, `location`, `service`, `review_url`). Keep review content separate from carousel UI attributes (e.g., `data-slide`, `aria-hidden`).
3. **Carousel Structure**: Replace the three existing carousels in `test.html` (`full-width-carousel`, `medium-width-carousel`, `small-width-carousel`) with new ones using `{% import_testimonials %}`. Each carousel is a `<div class="testimonials-carousel" role="region" aria-label="Customer testimonials">` with the provided `carousel_id`. Include carousel items: `<div class="testimonial-slide" data-slide="X" aria-hidden="true/false">` populated with review content (text, author, rating, location, service, review_url) from `reviews-data` via JavaScript. Use vanilla JavaScript (in a `<script>` tag) to cycle slides (show one at a time, auto-rotate every 5 seconds). Support responsive widths via CSS media queries in `testimonials/carousel.html` (e.g., font-size: 18px/16px/14px for 1400px/768px/375px, using classes like `testimonials-carousel--wide`).
4. **Implementation Details**:
   - Query `Testimonial.objects.filter(is_featured=True)` if `is_featured=True`, else `Testimonial.objects.all()`.
   - Include `rating` as raw data (e.g., `<span>{{ testimonial.rating }}</span>`) and styled as stars in both SEO data and carousel slides.
   - Use ARIA attributes for accessibility.
   - Use vanilla JavaScript for carousel logic (no external libraries).
   - Assume custom CSS in `testimonials/carousel.html` (e.g., `.testimonial-slide { display: none; } .testimonial-slide.active { display: block; }`) and leverage existing `width-full`, `width-medium`, `width-small` classes in `test.html` for responsiveness.
   - Keep HTML lean to minimize bloat (e.g., only include filtered testimonials, single SEO data block).
   - Replace the existing `{% testimonials_carousel %}` tags in `test.html` with `{% import_testimonials %}`, removing `{% set_testimonial_filter %}`.

Generate the complete code for:
- `app/templatetags/testimonial_tags.py` (inclusion tag logic).
- `app/templates/testimonials/carousel.html` (partial template with carousel HTML, vanilla JavaScript, and responsive CSS for Wide/Medium/Small).
- Updated `app/templates/test.html` (showing the single `reviews-data` container at the page’s start and three `{% import_testimonials %}` tags for `full-width-carousel`, `medium-width-carousel`, `small-width-carousel`).

Ensure the code is Python/Django compatible, accessible, SEO-friendly, and minimizes bloat. If the model name or fields differ, note how to adjust (e.g., replace `text` with `content`). Reference the current Django project for model details if needed. Remove the `{% set_testimonial_filter %}` tag and replace `{% testimonials_carousel %}` with `{% import_testimonials %}` in `test.html`.